#include "common.hpp"
#include "constants.hpp"

namespace luambedtls {
	void initConstants(State * state, Module & module) {
		Stack * stack = state->stack;
		stack->setField<int>("ERR_SSL_FEATURE_UNAVAILABLE", MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE);
		stack->setField<int>("ERR_SSL_BAD_INPUT_DATA", MBEDTLS_ERR_SSL_BAD_INPUT_DATA);
		stack->setField<int>("ERR_SSL_INVALID_MAC", MBEDTLS_ERR_SSL_INVALID_MAC);
		stack->setField<int>("ERR_SSL_INVALID_RECORD", MBEDTLS_ERR_SSL_INVALID_RECORD);
		stack->setField<int>("ERR_SSL_CONN_EOF", MBEDTLS_ERR_SSL_CONN_EOF);
		stack->setField<int>("ERR_SSL_UNKNOWN_CIPHER", MBEDTLS_ERR_SSL_UNKNOWN_CIPHER);
		stack->setField<int>("ERR_SSL_NO_CIPHER_CHOSEN", MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN);
		stack->setField<int>("ERR_SSL_NO_RNG", MBEDTLS_ERR_SSL_NO_RNG);
		stack->setField<int>("ERR_SSL_NO_CLIENT_CERTIFICATE", MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE);
		stack->setField<int>("ERR_SSL_CERTIFICATE_TOO_LARGE", MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE);
		stack->setField<int>("ERR_SSL_CERTIFICATE_REQUIRED", MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED);
		stack->setField<int>("ERR_SSL_PRIVATE_KEY_REQUIRED", MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED);
		stack->setField<int>("ERR_SSL_CA_CHAIN_REQUIRED", MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED);
		stack->setField<int>("ERR_SSL_UNEXPECTED_MESSAGE", MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE);
		stack->setField<int>("ERR_SSL_FATAL_ALERT_MESSAGE", MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE);
		stack->setField<int>("ERR_SSL_PEER_VERIFY_FAILED", MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED);
		stack->setField<int>("ERR_SSL_PEER_CLOSE_NOTIFY", MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY);
		stack->setField<int>("ERR_SSL_BAD_HS_CLIENT_HELLO", MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO);
		stack->setField<int>("ERR_SSL_BAD_HS_SERVER_HELLO", MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO);
		stack->setField<int>("ERR_SSL_BAD_HS_CERTIFICATE", MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE);
		stack->setField<int>("ERR_SSL_BAD_HS_CERTIFICATE_REQUEST", MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST);
		stack->setField<int>("ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE", MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE);
		stack->setField<int>("ERR_SSL_BAD_HS_SERVER_HELLO_DONE", MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE);
		stack->setField<int>("ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE", MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE);
		stack->setField<int>("ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP", MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP);
		stack->setField<int>("ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS", MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS);
		stack->setField<int>("ERR_SSL_BAD_HS_CERTIFICATE_VERIFY", MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY);
		stack->setField<int>("ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC", MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC);
		stack->setField<int>("ERR_SSL_BAD_HS_FINISHED", MBEDTLS_ERR_SSL_BAD_HS_FINISHED);
		stack->setField<int>("ERR_SSL_ALLOC_FAILED", MBEDTLS_ERR_SSL_ALLOC_FAILED);
		stack->setField<int>("ERR_SSL_HW_ACCEL_FAILED", MBEDTLS_ERR_SSL_HW_ACCEL_FAILED);
		stack->setField<int>("ERR_SSL_HW_ACCEL_FALLTHROUGH", MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH);
		stack->setField<int>("ERR_SSL_COMPRESSION_FAILED", MBEDTLS_ERR_SSL_COMPRESSION_FAILED);
		stack->setField<int>("ERR_SSL_BAD_HS_PROTOCOL_VERSION", MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION);
		stack->setField<int>("ERR_SSL_BAD_HS_NEW_SESSION_TICKET", MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET);
		stack->setField<int>("ERR_SSL_SESSION_TICKET_EXPIRED", MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED);
		stack->setField<int>("ERR_SSL_PK_TYPE_MISMATCH", MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH);
		stack->setField<int>("ERR_SSL_UNKNOWN_IDENTITY", MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY);
		stack->setField<int>("ERR_SSL_INTERNAL_ERROR", MBEDTLS_ERR_SSL_INTERNAL_ERROR);
		stack->setField<int>("ERR_SSL_COUNTER_WRAPPING", MBEDTLS_ERR_SSL_COUNTER_WRAPPING);
		stack->setField<int>("ERR_SSL_WAITING_SERVER_HELLO_RENEGO", MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO);
		stack->setField<int>("ERR_SSL_HELLO_VERIFY_REQUIRED", MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED);
		stack->setField<int>("ERR_SSL_BUFFER_TOO_SMALL", MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL);
		stack->setField<int>("ERR_SSL_NO_USABLE_CIPHERSUITE", MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE);
		stack->setField<int>("ERR_SSL_WANT_READ", MBEDTLS_ERR_SSL_WANT_READ);
		stack->setField<int>("ERR_SSL_WANT_WRITE", MBEDTLS_ERR_SSL_WANT_WRITE);
		stack->setField<int>("ERR_SSL_TIMEOUT", MBEDTLS_ERR_SSL_TIMEOUT);

		/*
		* Various constants
		*/
		stack->setField<int>("SSL_MAJOR_VERSION_3", MBEDTLS_SSL_MAJOR_VERSION_3);
		stack->setField<int>("SSL_MINOR_VERSION_0", MBEDTLS_SSL_MINOR_VERSION_0);
		stack->setField<int>("SSL_MINOR_VERSION_1", MBEDTLS_SSL_MINOR_VERSION_1);
		stack->setField<int>("SSL_MINOR_VERSION_2", MBEDTLS_SSL_MINOR_VERSION_2);
		stack->setField<int>("SSL_MINOR_VERSION_3", MBEDTLS_SSL_MINOR_VERSION_3);

		stack->setField<int>("SSL_TRANSPORT_STREAM", MBEDTLS_SSL_TRANSPORT_STREAM);
		stack->setField<int>("SSL_TRANSPORT_DATAGRAM", MBEDTLS_SSL_TRANSPORT_DATAGRAM);

		/* RFC 6066 section 4, see also mfl_code_to_length in ssl_tls.c
		* NONE must be zero so that memset()ing structure to zero works */
		stack->setField<int>("SSL_MAX_FRAG_LEN_NONE", MBEDTLS_SSL_MAX_FRAG_LEN_NONE);
		stack->setField<int>("SSL_MAX_FRAG_LEN_512", MBEDTLS_SSL_MAX_FRAG_LEN_512);
		stack->setField<int>("SSL_MAX_FRAG_LEN_1024", MBEDTLS_SSL_MAX_FRAG_LEN_1024);
		stack->setField<int>("SSL_MAX_FRAG_LEN_2048", MBEDTLS_SSL_MAX_FRAG_LEN_2048);
		stack->setField<int>("SSL_MAX_FRAG_LEN_4096", MBEDTLS_SSL_MAX_FRAG_LEN_4096);
		stack->setField<int>("SSL_MAX_FRAG_LEN_INVALID", MBEDTLS_SSL_MAX_FRAG_LEN_INVALID);

		stack->setField<int>("SSL_IS_CLIENT", MBEDTLS_SSL_IS_CLIENT);
		stack->setField<int>("SSL_IS_SERVER", MBEDTLS_SSL_IS_SERVER);

		stack->setField<int>("SSL_IS_NOT_FALLBACK", MBEDTLS_SSL_IS_NOT_FALLBACK);
		stack->setField<int>("SSL_IS_FALLBACK", MBEDTLS_SSL_IS_FALLBACK);

		stack->setField<int>("SSL_EXTENDED_MS_DISABLED", MBEDTLS_SSL_EXTENDED_MS_DISABLED);
		stack->setField<int>("SSL_EXTENDED_MS_ENABLED", MBEDTLS_SSL_EXTENDED_MS_ENABLED);

		stack->setField<int>("SSL_ETM_DISABLED", MBEDTLS_SSL_ETM_DISABLED);
		stack->setField<int>("SSL_ETM_ENABLED", MBEDTLS_SSL_ETM_ENABLED);

		stack->setField<int>("SSL_COMPRESS_NULL", MBEDTLS_SSL_COMPRESS_NULL);
		stack->setField<int>("SSL_COMPRESS_DEFLATE", MBEDTLS_SSL_COMPRESS_DEFLATE);

		stack->setField<int>("SSL_VERIFY_NONE", MBEDTLS_SSL_VERIFY_NONE);
		stack->setField<int>("SSL_VERIFY_OPTIONAL", MBEDTLS_SSL_VERIFY_OPTIONAL);
		stack->setField<int>("SSL_VERIFY_REQUIRED", MBEDTLS_SSL_VERIFY_REQUIRED);
		stack->setField<int>("SSL_VERIFY_UNSET", MBEDTLS_SSL_VERIFY_UNSET);

		stack->setField<int>("SSL_LEGACY_RENEGOTIATION", MBEDTLS_SSL_LEGACY_RENEGOTIATION);
		stack->setField<int>("SSL_SECURE_RENEGOTIATION", MBEDTLS_SSL_SECURE_RENEGOTIATION);

		stack->setField<int>("SSL_RENEGOTIATION_DISABLED", MBEDTLS_SSL_RENEGOTIATION_DISABLED);
		stack->setField<int>("SSL_RENEGOTIATION_ENABLED", MBEDTLS_SSL_RENEGOTIATION_ENABLED);

		stack->setField<int>("SSL_ANTI_REPLAY_DISABLED", MBEDTLS_SSL_ANTI_REPLAY_DISABLED);
		stack->setField<int>("SSL_ANTI_REPLAY_ENABLED", MBEDTLS_SSL_ANTI_REPLAY_ENABLED);

		stack->setField<int>("SSL_RENEGOTIATION_NOT_ENFORCED", MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED);
		stack->setField<int>("SSL_RENEGO_MAX_RECORDS_DEFAULT", MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT);

		stack->setField<int>("SSL_LEGACY_NO_RENEGOTIATION", MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION);
		stack->setField<int>("SSL_LEGACY_ALLOW_RENEGOTIATION", MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION);
		stack->setField<int>("SSL_LEGACY_BREAK_HANDSHAKE", MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE);

		stack->setField<int>("SSL_TRUNC_HMAC_DISABLED", MBEDTLS_SSL_TRUNC_HMAC_DISABLED);
		stack->setField<int>("SSL_TRUNC_HMAC_ENABLED", MBEDTLS_SSL_TRUNC_HMAC_ENABLED);
		stack->setField<int>("SSL_TRUNCATED_HMAC_LEN", MBEDTLS_SSL_TRUNCATED_HMAC_LEN);

		stack->setField<int>("SSL_SESSION_TICKETS_DISABLED", MBEDTLS_SSL_SESSION_TICKETS_DISABLED);
		stack->setField<int>("SSL_SESSION_TICKETS_ENABLED", MBEDTLS_SSL_SESSION_TICKETS_ENABLED);

		stack->setField<int>("SSL_CBC_RECORD_SPLITTING_DISABLED", MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED);
		stack->setField<int>("SSL_CBC_RECORD_SPLITTING_ENABLED", MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED);

		stack->setField<int>("SSL_ARC4_ENABLED", MBEDTLS_SSL_ARC4_ENABLED);
		stack->setField<int>("SSL_ARC4_DISABLED", MBEDTLS_SSL_ARC4_DISABLED);

		stack->setField<int>("SSL_PRESET_DEFAULT", MBEDTLS_SSL_PRESET_DEFAULT);
		stack->setField<int>("SSL_PRESET_SUITEB", MBEDTLS_SSL_PRESET_SUITEB);

		/*
		* Default range for DTLS retransmission timer value, in milliseconds.
		* RFC 6347 4.2.4.1 says from 1 second to 60 seconds.
		*/
		stack->setField<int>("SSL_DTLS_TIMEOUT_DFL_MIN", MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN);
		stack->setField<int>("SSL_DTLS_TIMEOUT_DFL_MAX", MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX);

		/**
		* \name SECTION: Module settings
		*
		* The configuration options you can set for this module are in this section.
		* Either change them in config.h or define them on the compiler command line.
		* \{
		*/

#if !defined(MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME)
		stack->setField<int>("SSL_DEFAULT_TICKET_LIFETIME", MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME);
#endif

		/*
		* Size of the input / output buffer.
		* Note: the RFC defines the default size of SSL / TLS messages. If you
		* change the value here, other clients / servers may not be able to
		* communicate with you anymore. Only change this value if you control
		* both sides of the connection and have it reduced at both sides, or
		* if you're using the Max Fragment Length extension and you know all your
		* peers are using it too!
		*/
#if !defined(MBEDTLS_SSL_MAX_CONTENT_LEN)
		stack->setField<int>("SSL_MAX_CONTENT_LEN", MBEDTLS_SSL_MAX_CONTENT_LEN);
#endif

		/* \} name SECTION: Module settings */

		/*
		* Length of the verify data for secure renegotiation
		*/
#if defined(MBEDTLS_SSL_PROTO_SSL3)
		stack->setField<int>("SSL_VERIFY_DATA_MAX_LEN", MBEDTLS_SSL_VERIFY_DATA_MAX_LEN);
#else
		stack->setField<int>("SSL_VERIFY_DATA_MAX_LEN", MBEDTLS_SSL_VERIFY_DATA_MAX_LEN);
#endif

		/*
		* Signaling ciphersuite values (SCSV)
		*/
		stack->setField<int>("SSL_EMPTY_RENEGOTIATION_INFO", MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO);
		stack->setField<int>("SSL_FALLBACK_SCSV_VALUE", MBEDTLS_SSL_FALLBACK_SCSV_VALUE);

		/*
		* Supported Signature and Hash algorithms (For TLS 1.2)
		* RFC 5246 section 7.4.1.4.1
		*/
		stack->setField<int>("SSL_HASH_NONE", MBEDTLS_SSL_HASH_NONE);
		stack->setField<int>("SSL_HASH_MD5", MBEDTLS_SSL_HASH_MD5);
		stack->setField<int>("SSL_HASH_SHA1", MBEDTLS_SSL_HASH_SHA1);
		stack->setField<int>("SSL_HASH_SHA224", MBEDTLS_SSL_HASH_SHA224);
		stack->setField<int>("SSL_HASH_SHA256", MBEDTLS_SSL_HASH_SHA256);
		stack->setField<int>("SSL_HASH_SHA384", MBEDTLS_SSL_HASH_SHA384);
		stack->setField<int>("SSL_HASH_SHA512", MBEDTLS_SSL_HASH_SHA512);

		stack->setField<int>("SSL_SIG_ANON", MBEDTLS_SSL_SIG_ANON);
		stack->setField<int>("SSL_SIG_RSA", MBEDTLS_SSL_SIG_RSA);
		stack->setField<int>("SSL_SIG_ECDSA", MBEDTLS_SSL_SIG_ECDSA);

		/*
		* Client Certificate Types
		* RFC 5246 section 7.4.4 plus RFC 4492 section 5.5
		*/
		stack->setField<int>("SSL_CERT_TYPE_RSA_SIGN", MBEDTLS_SSL_CERT_TYPE_RSA_SIGN);
		stack->setField<int>("SSL_CERT_TYPE_ECDSA_SIGN", MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN);

		/*
		* Message, alert and handshake types
		*/
		stack->setField<int>("SSL_MSG_CHANGE_CIPHER_SPEC", MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC);
		stack->setField<int>("SSL_MSG_ALERT", MBEDTLS_SSL_MSG_ALERT);
		stack->setField<int>("SSL_MSG_HANDSHAKE", MBEDTLS_SSL_MSG_HANDSHAKE);
		stack->setField<int>("SSL_MSG_APPLICATION_DATA", MBEDTLS_SSL_MSG_APPLICATION_DATA);

		stack->setField<int>("SSL_ALERT_LEVEL_WARNING", MBEDTLS_SSL_ALERT_LEVEL_WARNING);
		stack->setField<int>("SSL_ALERT_LEVEL_FATAL", MBEDTLS_SSL_ALERT_LEVEL_FATAL);

		stack->setField<int>("SSL_ALERT_MSG_CLOSE_NOTIFY", MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY);
		stack->setField<int>("SSL_ALERT_MSG_UNEXPECTED_MESSAGE", MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE);
		stack->setField<int>("SSL_ALERT_MSG_BAD_RECORD_MAC", MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC);
		stack->setField<int>("SSL_ALERT_MSG_DECRYPTION_FAILED", MBEDTLS_SSL_ALERT_MSG_DECRYPTION_FAILED);
		stack->setField<int>("SSL_ALERT_MSG_RECORD_OVERFLOW", MBEDTLS_SSL_ALERT_MSG_RECORD_OVERFLOW);
		stack->setField<int>("SSL_ALERT_MSG_DECOMPRESSION_FAILURE", MBEDTLS_SSL_ALERT_MSG_DECOMPRESSION_FAILURE);
		stack->setField<int>("SSL_ALERT_MSG_HANDSHAKE_FAILURE", MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE);
		stack->setField<int>("SSL_ALERT_MSG_NO_CERT", MBEDTLS_SSL_ALERT_MSG_NO_CERT);
		stack->setField<int>("SSL_ALERT_MSG_BAD_CERT", MBEDTLS_SSL_ALERT_MSG_BAD_CERT);
		stack->setField<int>("SSL_ALERT_MSG_UNSUPPORTED_CERT", MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT);
		stack->setField<int>("SSL_ALERT_MSG_CERT_REVOKED", MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED);
		stack->setField<int>("SSL_ALERT_MSG_CERT_EXPIRED", MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED);
		stack->setField<int>("SSL_ALERT_MSG_CERT_UNKNOWN", MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN);
		stack->setField<int>("SSL_ALERT_MSG_ILLEGAL_PARAMETER", MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER);
		stack->setField<int>("SSL_ALERT_MSG_UNKNOWN_CA", MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA);
		stack->setField<int>("SSL_ALERT_MSG_ACCESS_DENIED", MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED);
		stack->setField<int>("SSL_ALERT_MSG_DECODE_ERROR", MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR);
		stack->setField<int>("SSL_ALERT_MSG_DECRYPT_ERROR", MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR);
		stack->setField<int>("SSL_ALERT_MSG_EXPORT_RESTRICTION", MBEDTLS_SSL_ALERT_MSG_EXPORT_RESTRICTION);
		stack->setField<int>("SSL_ALERT_MSG_PROTOCOL_VERSION", MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION);
		stack->setField<int>("SSL_ALERT_MSG_INSUFFICIENT_SECURITY", MBEDTLS_SSL_ALERT_MSG_INSUFFICIENT_SECURITY);
		stack->setField<int>("SSL_ALERT_MSG_INTERNAL_ERROR", MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR);
		stack->setField<int>("SSL_ALERT_MSG_INAPROPRIATE_FALLBACK", MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK);
		stack->setField<int>("SSL_ALERT_MSG_USER_CANCELED", MBEDTLS_SSL_ALERT_MSG_USER_CANCELED);
		stack->setField<int>("SSL_ALERT_MSG_NO_RENEGOTIATION", MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION);
		stack->setField<int>("SSL_ALERT_MSG_UNSUPPORTED_EXT", MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_EXT);
		stack->setField<int>("SSL_ALERT_MSG_UNRECOGNIZED_NAME", MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME);
		stack->setField<int>("SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY", MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY);
		stack->setField<int>("SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL", MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL);

		stack->setField<int>("SSL_HS_HELLO_REQUEST", MBEDTLS_SSL_HS_HELLO_REQUEST);
		stack->setField<int>("SSL_HS_CLIENT_HELLO", MBEDTLS_SSL_HS_CLIENT_HELLO);
		stack->setField<int>("SSL_HS_SERVER_HELLO", MBEDTLS_SSL_HS_SERVER_HELLO);
		stack->setField<int>("SSL_HS_HELLO_VERIFY_REQUEST", MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST);
		stack->setField<int>("SSL_HS_NEW_SESSION_TICKET", MBEDTLS_SSL_HS_NEW_SESSION_TICKET);
		stack->setField<int>("SSL_HS_CERTIFICATE", MBEDTLS_SSL_HS_CERTIFICATE);
		stack->setField<int>("SSL_HS_SERVER_KEY_EXCHANGE", MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE);
		stack->setField<int>("SSL_HS_CERTIFICATE_REQUEST", MBEDTLS_SSL_HS_CERTIFICATE_REQUEST);
		stack->setField<int>("SSL_HS_SERVER_HELLO_DONE", MBEDTLS_SSL_HS_SERVER_HELLO_DONE);
		stack->setField<int>("SSL_HS_CERTIFICATE_VERIFY", MBEDTLS_SSL_HS_CERTIFICATE_VERIFY);
		stack->setField<int>("SSL_HS_CLIENT_KEY_EXCHANGE", MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE);
		stack->setField<int>("SSL_HS_FINISHED", MBEDTLS_SSL_HS_FINISHED);

		/*
		* TLS extensions
		*/
		stack->setField<int>("TLS_EXT_SERVERNAME", MBEDTLS_TLS_EXT_SERVERNAME);
		stack->setField<int>("TLS_EXT_SERVERNAME_HOSTNAME", MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME);

		stack->setField<int>("TLS_EXT_MAX_FRAGMENT_LENGTH", MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH);

		stack->setField<int>("TLS_EXT_TRUNCATED_HMAC", MBEDTLS_TLS_EXT_TRUNCATED_HMAC);

		stack->setField<int>("TLS_EXT_SUPPORTED_ELLIPTIC_CURVES", MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES);
		stack->setField<int>("TLS_EXT_SUPPORTED_POINT_FORMATS", MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS);

		stack->setField<int>("TLS_EXT_SIG_ALG", MBEDTLS_TLS_EXT_SIG_ALG);

		stack->setField<int>("TLS_EXT_ALPN", MBEDTLS_TLS_EXT_ALPN);

		stack->setField<int>("TLS_EXT_ENCRYPT_THEN_MAC", MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC);
		stack->setField<int>("TLS_EXT_EXTENDED_MASTER_SECRET", MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET);

		stack->setField<int>("TLS_EXT_SESSION_TICKET", MBEDTLS_TLS_EXT_SESSION_TICKET);

		stack->setField<int>("TLS_EXT_RENEGOTIATION_INFO", MBEDTLS_TLS_EXT_RENEGOTIATION_INFO);

		/*
		* Size defines
		*/
#if !defined(MBEDTLS_PSK_MAX_LEN)
		stack->setField<int>("PSK_MAX_LEN", MBEDTLS_PSK_MAX_LEN);
#endif

		stack->setField<int>("SSL_HELLO_REQUEST", MBEDTLS_SSL_HELLO_REQUEST);
		stack->setField<int>("SSL_CLIENT_HELLO", MBEDTLS_SSL_CLIENT_HELLO);
		stack->setField<int>("SSL_SERVER_HELLO", MBEDTLS_SSL_SERVER_HELLO);
		stack->setField<int>("SSL_SERVER_CERTIFICATE", MBEDTLS_SSL_SERVER_CERTIFICATE);
		stack->setField<int>("SSL_SERVER_KEY_EXCHANGE", MBEDTLS_SSL_SERVER_KEY_EXCHANGE);
		stack->setField<int>("SSL_CERTIFICATE_REQUEST", MBEDTLS_SSL_CERTIFICATE_REQUEST);
		stack->setField<int>("SSL_SERVER_HELLO_DONE", MBEDTLS_SSL_SERVER_HELLO_DONE);
		stack->setField<int>("SSL_CLIENT_CERTIFICATE", MBEDTLS_SSL_CLIENT_CERTIFICATE);
		stack->setField<int>("SSL_CLIENT_KEY_EXCHANGE", MBEDTLS_SSL_CLIENT_KEY_EXCHANGE);
		stack->setField<int>("SSL_CERTIFICATE_VERIFY", MBEDTLS_SSL_CERTIFICATE_VERIFY);
		stack->setField<int>("SSL_CLIENT_CHANGE_CIPHER_SPEC", MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC);
		stack->setField<int>("SSL_CLIENT_FINISHED", MBEDTLS_SSL_CLIENT_FINISHED);
		stack->setField<int>("SSL_SERVER_CHANGE_CIPHER_SPEC", MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC);
		stack->setField<int>("SSL_SERVER_FINISHED", MBEDTLS_SSL_SERVER_FINISHED);
		stack->setField<int>("SSL_FLUSH_BUFFERS", MBEDTLS_SSL_FLUSH_BUFFERS);
		stack->setField<int>("SSL_HANDSHAKE_WRAPUP", MBEDTLS_SSL_HANDSHAKE_WRAPUP);
		stack->setField<int>("SSL_HANDSHAKE_OVER", MBEDTLS_SSL_HANDSHAKE_OVER);
		stack->setField<int>("SSL_SERVER_NEW_SESSION_TICKET", MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET);
		stack->setField<int>("SSL_SERVER_HELLO_VERIFY_REQUEST_SENT", MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT);

		//AES
		stack->setField<int>("AES_ENCRYPT", MBEDTLS_AES_ENCRYPT);
		stack->setField<int>("AES_DECRYPT", MBEDTLS_AES_DECRYPT);
		stack->setField<int>("ERR_AES_INVALID_KEY_LENGTH", MBEDTLS_ERR_AES_INVALID_KEY_LENGTH);
		stack->setField<int>("ERR_AES_INVALID_INPUT_LENGTH", MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH);
		//Blowfish
		stack->setField<int>("BLOWFISH_ENCRYPT", MBEDTLS_BLOWFISH_ENCRYPT);
		stack->setField<int>("BLOWFISH_DECRYPT", MBEDTLS_BLOWFISH_DECRYPT);
		stack->setField<int>("BLOWFISH_MAX_KEY_BITS", MBEDTLS_BLOWFISH_MAX_KEY_BITS);
		stack->setField<int>("BLOWFISH_ROUNDS", MBEDTLS_BLOWFISH_ROUNDS);
		stack->setField<int>("BLOWFISH_BLOCKSIZE", MBEDTLS_BLOWFISH_BLOCKSIZE);
		stack->setField<int>("ERR_BLOWFISH_INVALID_KEY_LENGTH", MBEDTLS_ERR_BLOWFISH_INVALID_KEY_LENGTH);
		stack->setField<int>("ERR_BLOWFISH_INVALID_INPUT_LENGTH", MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH);
		//Camellia
		stack->setField<int>("CAMELLIA_ENCRYPT", MBEDTLS_CAMELLIA_ENCRYPT);
		stack->setField<int>("CAMELLIA_DECRYPT   ", MBEDTLS_CAMELLIA_DECRYPT);
		stack->setField<int>("ERR_CAMELLIA_INVALID_KEY_LENGTH", MBEDTLS_ERR_CAMELLIA_INVALID_KEY_LENGTH);
		stack->setField<int>("ERR_CAMELLIA_INVALID_INPUT_LENGTH", MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH);
		//DES/DES3
		stack->setField<int>("DES_ENCRYPT", MBEDTLS_DES_ENCRYPT);
		stack->setField<int>("DES_DECRYPT", MBEDTLS_DES_DECRYPT);
		stack->setField<int>("ERR_DES_INVALID_INPUT_LENGTH", MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH);
		stack->setField<int>("DES_KEY_SIZE   ", MBEDTLS_DES_KEY_SIZE);
		//GCM
		stack->setField<int>("GCM_ENCRYPT", MBEDTLS_GCM_ENCRYPT);
		stack->setField<int>("GCM_DECRYPT", MBEDTLS_GCM_DECRYPT);
		stack->setField<int>("ERR_GCM_AUTH_FAILED", MBEDTLS_ERR_GCM_AUTH_FAILED);
		stack->setField<int>("ERR_GCM_BAD_INPUT", MBEDTLS_ERR_GCM_BAD_INPUT);
		//XTEA
		stack->setField<int>("XTEA_ENCRYPT", MBEDTLS_XTEA_ENCRYPT);
		stack->setField<int>("XTEA_DECRYPT", MBEDTLS_XTEA_DECRYPT);
		stack->setField<int>("ERR_XTEA_INVALID_INPUT_LENGTH", MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH);

		//Diffie-Hellman-Merkle
		stack->setField<int>("ERR_DHM_BAD_INPUT_DATA", MBEDTLS_ERR_DHM_BAD_INPUT_DATA);
		stack->setField<int>("ERR_DHM_READ_PARAMS_FAILED", MBEDTLS_ERR_DHM_READ_PARAMS_FAILED);
		stack->setField<int>("ERR_DHM_MAKE_PARAMS_FAILED", MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED);
		stack->setField<int>("ERR_DHM_READ_PUBLIC_FAILED", MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED);
		stack->setField<int>("ERR_DHM_MAKE_PUBLIC_FAILED", MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED);
		stack->setField<int>("ERR_DHM_CALC_SECRET_FAILED", MBEDTLS_ERR_DHM_CALC_SECRET_FAILED);
		stack->setField<int>("ERR_DHM_INVALID_FORMAT", MBEDTLS_ERR_DHM_INVALID_FORMAT);
		stack->setField<int>("ERR_DHM_ALLOC_FAILED", MBEDTLS_ERR_DHM_ALLOC_FAILED);
		stack->setField<int>("ERR_DHM_FILE_IO_ERROR", MBEDTLS_ERR_DHM_FILE_IO_ERROR);
		stack->setField<const std::string &>("DHM_RFC3526_MODP_2048_P", MBEDTLS_DHM_RFC3526_MODP_2048_P);
		stack->setField<const std::string &>("DHM_RFC3526_MODP_2048_G", MBEDTLS_DHM_RFC3526_MODP_2048_G);
		stack->setField<const std::string &>("DHM_RFC3526_MODP_3072_P", MBEDTLS_DHM_RFC3526_MODP_3072_P);
		stack->setField<const std::string &>("DHM_RFC3526_MODP_3072_G", MBEDTLS_DHM_RFC3526_MODP_3072_G);
		stack->setField<const std::string &>("DHM_RFC3526_MODP_4096_P", MBEDTLS_DHM_RFC3526_MODP_4096_P);
		stack->setField<const std::string &>("DHM_RFC3526_MODP_4096_G", MBEDTLS_DHM_RFC3526_MODP_4096_G);
		stack->setField<const std::string &>("DHM_RFC5114_MODP_2048_P", MBEDTLS_DHM_RFC5114_MODP_2048_P);
		stack->setField<const std::string &>("DHM_RFC5114_MODP_2048_G", MBEDTLS_DHM_RFC5114_MODP_2048_G);

		//RSA
		stack->setField<int>("ERR_RSA_BAD_INPUT_DATA", MBEDTLS_ERR_RSA_BAD_INPUT_DATA);
		stack->setField<int>("ERR_RSA_INVALID_PADDING", MBEDTLS_ERR_RSA_INVALID_PADDING);
		stack->setField<int>("ERR_RSA_KEY_GEN_FAILED", MBEDTLS_ERR_RSA_KEY_GEN_FAILED);
		stack->setField<int>("ERR_RSA_KEY_CHECK_FAILED", MBEDTLS_ERR_RSA_KEY_CHECK_FAILED);
		stack->setField<int>("ERR_RSA_PUBLIC_FAILED", MBEDTLS_ERR_RSA_PUBLIC_FAILED);
		stack->setField<int>("ERR_RSA_PRIVATE_FAILED", MBEDTLS_ERR_RSA_PRIVATE_FAILED);
		stack->setField<int>("ERR_RSA_VERIFY_FAILED", MBEDTLS_ERR_RSA_VERIFY_FAILED);
		stack->setField<int>("ERR_RSA_OUTPUT_TOO_LARGE", MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE);
		stack->setField<int>("ERR_RSA_RNG_FAILED", MBEDTLS_ERR_RSA_RNG_FAILED);
		stack->setField<int>("RSA_PUBLIC", MBEDTLS_RSA_PUBLIC);
		stack->setField<int>("RSA_PRIVATE", MBEDTLS_RSA_PRIVATE);
		stack->setField<int>("RSA_PKCS_V15", MBEDTLS_RSA_PKCS_V15);
		stack->setField<int>("RSA_PKCS_V21", MBEDTLS_RSA_PKCS_V21);
		stack->setField<int>("RSA_SIGN", MBEDTLS_RSA_SIGN);
		stack->setField<int>("RSA_CRYPT", MBEDTLS_RSA_CRYPT);
		stack->setField<int>("RSA_SALT_LEN_ANY", MBEDTLS_RSA_SALT_LEN_ANY);

		//MD
		stack->setField<int>("MD_NONE", MBEDTLS_MD_NONE);
		stack->setField<int>("MD_MD2", MBEDTLS_MD_MD2);
		stack->setField<int>("MD_MD4", MBEDTLS_MD_MD4);
		stack->setField<int>("MD_MD5", MBEDTLS_MD_MD5);
		stack->setField<int>("MD_SHA1", MBEDTLS_MD_SHA1);
		stack->setField<int>("MD_SHA224", MBEDTLS_MD_SHA224);
		stack->setField<int>("MD_SHA256", MBEDTLS_MD_SHA256);
		stack->setField<int>("MD_SHA384", MBEDTLS_MD_SHA384);
		stack->setField<int>("MD_SHA512", MBEDTLS_MD_SHA512);
		stack->setField<int>("MD_RIPEMD160", MBEDTLS_MD_RIPEMD160);

#if !defined(MBEDTLS_X509_MAX_INTERMEDIATE_CA)
		stack->setField<int>("X509_MAX_INTERMEDIATE_CA", MBEDTLS_X509_MAX_INTERMEDIATE_CA);
#endif
		stack->setField<int>("ERR_X509_FEATURE_UNAVAILABLE", MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE);
		stack->setField<int>("ERR_X509_UNKNOWN_OID", MBEDTLS_ERR_X509_UNKNOWN_OID);
		stack->setField<int>("ERR_X509_INVALID_FORMAT", MBEDTLS_ERR_X509_INVALID_FORMAT);
		stack->setField<int>("ERR_X509_INVALID_VERSION", MBEDTLS_ERR_X509_INVALID_VERSION);
		stack->setField<int>("ERR_X509_INVALID_SERIAL", MBEDTLS_ERR_X509_INVALID_SERIAL);
		stack->setField<int>("ERR_X509_INVALID_ALG", MBEDTLS_ERR_X509_INVALID_ALG);
		stack->setField<int>("ERR_X509_INVALID_NAME", MBEDTLS_ERR_X509_INVALID_NAME);
		stack->setField<int>("ERR_X509_INVALID_DATE", MBEDTLS_ERR_X509_INVALID_DATE);
		stack->setField<int>("ERR_X509_INVALID_SIGNATURE", MBEDTLS_ERR_X509_INVALID_SIGNATURE);
		stack->setField<int>("ERR_X509_INVALID_EXTENSIONS", MBEDTLS_ERR_X509_INVALID_EXTENSIONS);
		stack->setField<int>("ERR_X509_UNKNOWN_VERSION", MBEDTLS_ERR_X509_UNKNOWN_VERSION);
		stack->setField<int>("ERR_X509_UNKNOWN_SIG_ALG", MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG);
		stack->setField<int>("ERR_X509_SIG_MISMATCH", MBEDTLS_ERR_X509_SIG_MISMATCH);
		stack->setField<int>("ERR_X509_CERT_VERIFY_FAILED", MBEDTLS_ERR_X509_CERT_VERIFY_FAILED);
		stack->setField<int>("ERR_X509_CERT_UNKNOWN_FORMAT", MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT);
		stack->setField<int>("ERR_X509_BAD_INPUT_DATA", MBEDTLS_ERR_X509_BAD_INPUT_DATA);
		stack->setField<int>("ERR_X509_ALLOC_FAILED", MBEDTLS_ERR_X509_ALLOC_FAILED);
		stack->setField<int>("ERR_X509_FILE_IO_ERROR", MBEDTLS_ERR_X509_FILE_IO_ERROR);
		stack->setField<int>("ERR_X509_BUFFER_TOO_SMALL", MBEDTLS_ERR_X509_BUFFER_TOO_SMALL);


		/* Reminder: update x509_crt_verify_strings[] in library/x509_crt.c */
		stack->setField<int>("X509_BADCERT_EXPIRED", MBEDTLS_X509_BADCERT_EXPIRED);
		stack->setField<int>("X509_BADCERT_REVOKED", MBEDTLS_X509_BADCERT_REVOKED);
		stack->setField<int>("X509_BADCERT_CN_MISMATCH", MBEDTLS_X509_BADCERT_CN_MISMATCH);
		stack->setField<int>("X509_BADCERT_NOT_TRUSTED", MBEDTLS_X509_BADCERT_NOT_TRUSTED);
		stack->setField<int>("X509_BADCRL_NOT_TRUSTED", MBEDTLS_X509_BADCRL_NOT_TRUSTED);
		stack->setField<int>("X509_BADCRL_EXPIRED", MBEDTLS_X509_BADCRL_EXPIRED);
		stack->setField<int>("X509_BADCERT_MISSING", MBEDTLS_X509_BADCERT_MISSING);
		stack->setField<int>("X509_BADCERT_SKIP_VERIFY", MBEDTLS_X509_BADCERT_SKIP_VERIFY);
		stack->setField<int>("X509_BADCERT_OTHER", MBEDTLS_X509_BADCERT_OTHER);
		stack->setField<int>("X509_BADCERT_FUTURE", MBEDTLS_X509_BADCERT_FUTURE);
		stack->setField<int>("X509_BADCRL_FUTURE", MBEDTLS_X509_BADCRL_FUTURE);
		stack->setField<int>("X509_BADCERT_KEY_USAGE", MBEDTLS_X509_BADCERT_KEY_USAGE);
		stack->setField<int>("X509_BADCERT_EXT_KEY_USAGE", MBEDTLS_X509_BADCERT_EXT_KEY_USAGE);
		stack->setField<int>("X509_BADCERT_NS_CERT_TYPE", MBEDTLS_X509_BADCERT_NS_CERT_TYPE);
		stack->setField<int>("X509_BADCERT_BAD_MD", MBEDTLS_X509_BADCERT_BAD_MD);
		stack->setField<int>("X509_BADCERT_BAD_PK", MBEDTLS_X509_BADCERT_BAD_PK);
		stack->setField<int>("X509_BADCERT_BAD_KEY", MBEDTLS_X509_BADCERT_BAD_KEY);
		stack->setField<int>("X509_BADCRL_BAD_MD", MBEDTLS_X509_BADCRL_BAD_MD);
		stack->setField<int>("X509_BADCRL_BAD_PK", MBEDTLS_X509_BADCRL_BAD_PK);
		stack->setField<int>("X509_BADCRL_BAD_KEY", MBEDTLS_X509_BADCRL_BAD_KEY);

		stack->setField<int>("X509_KU_DIGITAL_SIGNATURE", MBEDTLS_X509_KU_DIGITAL_SIGNATURE);
		stack->setField<int>("X509_KU_NON_REPUDIATION", MBEDTLS_X509_KU_NON_REPUDIATION);
		stack->setField<int>("X509_KU_KEY_ENCIPHERMENT", MBEDTLS_X509_KU_KEY_ENCIPHERMENT);
		stack->setField<int>("X509_KU_DATA_ENCIPHERMENT", MBEDTLS_X509_KU_DATA_ENCIPHERMENT);
		stack->setField<int>("X509_KU_KEY_AGREEMENT", MBEDTLS_X509_KU_KEY_AGREEMENT);
		stack->setField<int>("X509_KU_KEY_CERT_SIGN", MBEDTLS_X509_KU_KEY_CERT_SIGN);
		stack->setField<int>("X509_KU_CRL_SIGN", MBEDTLS_X509_KU_CRL_SIGN);
		stack->setField<int>("X509_KU_ENCIPHER_ONLY", MBEDTLS_X509_KU_ENCIPHER_ONLY);
		stack->setField<int>("X509_KU_DECIPHER_ONLY", MBEDTLS_X509_KU_DECIPHER_ONLY);

		/*
		* Netscape certificate types
		* (http://www.mozilla.org/projects/security/pki/nss/tech-notes/tn3.html)
		*/

		stack->setField<int>("X509_NS_CERT_TYPE_SSL_CLIENT", MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT);
		stack->setField<int>("X509_NS_CERT_TYPE_SSL_SERVER", MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER);
		stack->setField<int>("X509_NS_CERT_TYPE_EMAIL", MBEDTLS_X509_NS_CERT_TYPE_EMAIL);
		stack->setField<int>("X509_NS_CERT_TYPE_OBJECT_SIGNING", MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING);
		stack->setField<int>("X509_NS_CERT_TYPE_RESERVED", MBEDTLS_X509_NS_CERT_TYPE_RESERVED);
		stack->setField<int>("X509_NS_CERT_TYPE_SSL_CA", MBEDTLS_X509_NS_CERT_TYPE_SSL_CA);
		stack->setField<int>("X509_NS_CERT_TYPE_EMAIL_CA", MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA);
		stack->setField<int>("X509_NS_CERT_TYPE_OBJECT_SIGNING_CA", MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA);

		/*
		* X.509 extension types
		*
		* Comments refer to the status for using certificates. Status can be
		* different for writing certificates or reading CRLs or CSRs.
		*/
		stack->setField<int>("X509_EXT_AUTHORITY_KEY_IDENTIFIER", MBEDTLS_X509_EXT_AUTHORITY_KEY_IDENTIFIER);
		stack->setField<int>("X509_EXT_SUBJECT_KEY_IDENTIFIER", MBEDTLS_X509_EXT_SUBJECT_KEY_IDENTIFIER);
		stack->setField<int>("X509_EXT_KEY_USAGE", MBEDTLS_X509_EXT_KEY_USAGE);
		stack->setField<int>("X509_EXT_CERTIFICATE_POLICIES", MBEDTLS_X509_EXT_CERTIFICATE_POLICIES);
		stack->setField<int>("X509_EXT_POLICY_MAPPINGS", MBEDTLS_X509_EXT_POLICY_MAPPINGS);
		stack->setField<int>("X509_EXT_SUBJECT_ALT_NAME", MBEDTLS_X509_EXT_SUBJECT_ALT_NAME);
		stack->setField<int>("X509_EXT_ISSUER_ALT_NAME", MBEDTLS_X509_EXT_ISSUER_ALT_NAME);
		stack->setField<int>("X509_EXT_SUBJECT_DIRECTORY_ATTRS", MBEDTLS_X509_EXT_SUBJECT_DIRECTORY_ATTRS);
		stack->setField<int>("X509_EXT_BASIC_CONSTRAINTS", MBEDTLS_X509_EXT_BASIC_CONSTRAINTS);
		stack->setField<int>("X509_EXT_NAME_CONSTRAINTS", MBEDTLS_X509_EXT_NAME_CONSTRAINTS);
		stack->setField<int>("X509_EXT_POLICY_CONSTRAINTS", MBEDTLS_X509_EXT_POLICY_CONSTRAINTS);
		stack->setField<int>("X509_EXT_EXTENDED_KEY_USAGE", MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE);
		stack->setField<int>("X509_EXT_CRL_DISTRIBUTION_POINTS", MBEDTLS_X509_EXT_CRL_DISTRIBUTION_POINTS);
		stack->setField<int>("X509_EXT_INIHIBIT_ANYPOLICY", MBEDTLS_X509_EXT_INIHIBIT_ANYPOLICY);
		stack->setField<int>("X509_EXT_FRESHEST_CRL", MBEDTLS_X509_EXT_FRESHEST_CRL);

		stack->setField<int>("X509_EXT_NS_CERT_TYPE", MBEDTLS_X509_EXT_NS_CERT_TYPE);

		/*
		* Storage format identifiers
		* Recognized formats: PEM and DER
		*/
		stack->setField<int>("X509_FORMAT_DER", MBEDTLS_X509_FORMAT_DER);
		stack->setField<int>("X509_FORMAT_PEM", MBEDTLS_X509_FORMAT_PEM);

		stack->setField<int>("X509_MAX_DN_NAME_SIZE", MBEDTLS_X509_MAX_DN_NAME_SIZE);

		stack->setField<int>("ERR_ASN1_OUT_OF_DATA", MBEDTLS_ERR_ASN1_OUT_OF_DATA);
		stack->setField<int>("ERR_ASN1_UNEXPECTED_TAG", MBEDTLS_ERR_ASN1_UNEXPECTED_TAG);
		stack->setField<int>("ERR_ASN1_INVALID_LENGTH", MBEDTLS_ERR_ASN1_INVALID_LENGTH);
		stack->setField<int>("ERR_ASN1_LENGTH_MISMATCH", MBEDTLS_ERR_ASN1_LENGTH_MISMATCH);
		stack->setField<int>("ERR_ASN1_INVALID_DATA", MBEDTLS_ERR_ASN1_INVALID_DATA);
		stack->setField<int>("ERR_ASN1_ALLOC_FAILED", MBEDTLS_ERR_ASN1_ALLOC_FAILED);
		stack->setField<int>("ERR_ASN1_BUF_TOO_SMALL", MBEDTLS_ERR_ASN1_BUF_TOO_SMALL);

		stack->setField<int>("ASN1_BOOLEAN", MBEDTLS_ASN1_BOOLEAN);
		stack->setField<int>("ASN1_INTEGER", MBEDTLS_ASN1_INTEGER);
		stack->setField<int>("ASN1_BIT_STRING", MBEDTLS_ASN1_BIT_STRING);
		stack->setField<int>("ASN1_OCTET_STRING", MBEDTLS_ASN1_OCTET_STRING);
		stack->setField<int>("ASN1_NULL", MBEDTLS_ASN1_NULL);
		stack->setField<int>("ASN1_OID", MBEDTLS_ASN1_OID);
		stack->setField<int>("ASN1_UTF8_STRING", MBEDTLS_ASN1_UTF8_STRING);
		stack->setField<int>("ASN1_SEQUENCE", MBEDTLS_ASN1_SEQUENCE);
		stack->setField<int>("ASN1_SET", MBEDTLS_ASN1_SET);
		stack->setField<int>("ASN1_PRINTABLE_STRING", MBEDTLS_ASN1_PRINTABLE_STRING);
		stack->setField<int>("ASN1_T61_STRING", MBEDTLS_ASN1_T61_STRING);
		stack->setField<int>("ASN1_IA5_STRING", MBEDTLS_ASN1_IA5_STRING);
		stack->setField<int>("ASN1_UTC_TIME", MBEDTLS_ASN1_UTC_TIME);
		stack->setField<int>("ASN1_GENERALIZED_TIME", MBEDTLS_ASN1_GENERALIZED_TIME);
		stack->setField<int>("ASN1_UNIVERSAL_STRING", MBEDTLS_ASN1_UNIVERSAL_STRING);
		stack->setField<int>("ASN1_BMP_STRING", MBEDTLS_ASN1_BMP_STRING);
		stack->setField<int>("ASN1_PRIMITIVE", MBEDTLS_ASN1_PRIMITIVE);
		stack->setField<int>("ASN1_CONSTRUCTED", MBEDTLS_ASN1_CONSTRUCTED);
		stack->setField<int>("ASN1_CONTEXT_SPECIFIC", MBEDTLS_ASN1_CONTEXT_SPECIFIC);

		stack->setField<int>("ERR_ENTROPY_SOURCE_FAILED", MBEDTLS_ERR_ENTROPY_SOURCE_FAILED);
		stack->setField<int>("ERR_ENTROPY_MAX_SOURCES", MBEDTLS_ERR_ENTROPY_MAX_SOURCES);
		stack->setField<int>("ERR_ENTROPY_NO_SOURCES_DEFINED", MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED);
		stack->setField<int>("ERR_ENTROPY_NO_STRONG_SOURCE", MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE);
		stack->setField<int>("ERR_ENTROPY_FILE_IO_ERROR", MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR);
		stack->setField<int>("ENTROPY_MAX_SOURCES", MBEDTLS_ENTROPY_MAX_SOURCES);
		stack->setField<int>("ENTROPY_MAX_GATHER", MBEDTLS_ENTROPY_MAX_GATHER);
		stack->setField<int>("ENTROPY_MAX_SOURCES", MBEDTLS_ENTROPY_MAX_SOURCES);
		stack->setField<int>("ENTROPY_BLOCK_SIZE", MBEDTLS_ENTROPY_BLOCK_SIZE);
		stack->setField<int>("ENTROPY_SOURCE_MANUAL", MBEDTLS_ENTROPY_SOURCE_MANUAL);
		stack->setField<int>("ENTROPY_SOURCE_STRONG", MBEDTLS_ENTROPY_SOURCE_STRONG);
		stack->setField<int>("ENTROPY_SOURCE_WEAK", MBEDTLS_ENTROPY_SOURCE_WEAK);

		stack->setField<int>("PK_RSA", MBEDTLS_PK_RSA);
		stack->setField<int>("PK_ECKEY", MBEDTLS_PK_ECKEY);
		stack->setField<int>("PK_ECKEY_DH", MBEDTLS_PK_ECKEY_DH);
		stack->setField<int>("PK_ECDSA", MBEDTLS_PK_ECDSA);
		stack->setField<int>("PK_RSA_ALT", MBEDTLS_PK_RSA_ALT);
		stack->setField<int>("PK_RSASSA_PSS", MBEDTLS_PK_RSASSA_PSS);

		
		stack->setField<int>("CIPHER_ID_NULL", MBEDTLS_CIPHER_ID_NULL);
		stack->setField<int>("CIPHER_ID_AES", MBEDTLS_CIPHER_ID_AES);
		stack->setField<int>("CIPHER_ID_DES", MBEDTLS_CIPHER_ID_DES);
		stack->setField<int>("CIPHER_ID_3DES", MBEDTLS_CIPHER_ID_3DES);
		stack->setField<int>("CIPHER_ID_CAMELLIA", MBEDTLS_CIPHER_ID_CAMELLIA);
		stack->setField<int>("CIPHER_ID_BLOWFISH", MBEDTLS_CIPHER_ID_BLOWFISH);
		stack->setField<int>("CIPHER_ID_ARC4", MBEDTLS_CIPHER_ID_ARC4);

		stack->setField<int>("CIPHER_ID_ARC4", MBEDTLS_CIPHER_ID_ARC4);
		stack->setField<int>("CIPHER_NULL", MBEDTLS_CIPHER_NULL);
		stack->setField<int>("CIPHER_AES_128_ECB", MBEDTLS_CIPHER_AES_128_ECB);
		stack->setField<int>("CIPHER_AES_192_ECB", MBEDTLS_CIPHER_AES_192_ECB);
		stack->setField<int>("CIPHER_AES_256_ECB", MBEDTLS_CIPHER_AES_256_ECB);
		stack->setField<int>("CIPHER_AES_128_CBC", MBEDTLS_CIPHER_AES_128_CBC);
		stack->setField<int>("CIPHER_AES_192_CBC", MBEDTLS_CIPHER_AES_192_CBC);
		stack->setField<int>("CIPHER_AES_256_CBC", MBEDTLS_CIPHER_AES_256_CBC);
		stack->setField<int>("CIPHER_AES_128_CFB128", MBEDTLS_CIPHER_AES_128_CFB128);
		stack->setField<int>("CIPHER_AES_192_CFB128", MBEDTLS_CIPHER_AES_192_CFB128);
		stack->setField<int>("CIPHER_AES_256_CFB128", MBEDTLS_CIPHER_AES_256_CFB128);
		stack->setField<int>("CIPHER_AES_128_CTR", MBEDTLS_CIPHER_AES_128_CTR);
		stack->setField<int>("CIPHER_AES_192_CTR", MBEDTLS_CIPHER_AES_192_CTR);
		stack->setField<int>("CIPHER_AES_256_CTR", MBEDTLS_CIPHER_AES_256_CTR);
		stack->setField<int>("CIPHER_AES_128_GCM", MBEDTLS_CIPHER_AES_128_GCM);
		stack->setField<int>("CIPHER_AES_192_GCM", MBEDTLS_CIPHER_AES_192_GCM);
		stack->setField<int>("CIPHER_AES_256_GCM", MBEDTLS_CIPHER_AES_256_GCM);
		stack->setField<int>("CIPHER_CAMELLIA_128_ECB", MBEDTLS_CIPHER_CAMELLIA_128_ECB);
		stack->setField<int>("CIPHER_CAMELLIA_192_ECB", MBEDTLS_CIPHER_CAMELLIA_192_ECB);
		stack->setField<int>("CIPHER_CAMELLIA_256_ECB", MBEDTLS_CIPHER_CAMELLIA_256_ECB);
		stack->setField<int>("CIPHER_CAMELLIA_128_CBC", MBEDTLS_CIPHER_CAMELLIA_128_CBC);
		stack->setField<int>("CIPHER_CAMELLIA_192_CBC", MBEDTLS_CIPHER_CAMELLIA_192_CBC);
		stack->setField<int>("CIPHER_CAMELLIA_256_CBC", MBEDTLS_CIPHER_CAMELLIA_256_CBC);
		stack->setField<int>("CIPHER_CAMELLIA_128_CFB128", MBEDTLS_CIPHER_CAMELLIA_128_CFB128);
		stack->setField<int>("CIPHER_CAMELLIA_192_CFB128", MBEDTLS_CIPHER_CAMELLIA_192_CFB128);
		stack->setField<int>("CIPHER_CAMELLIA_256_CFB128", MBEDTLS_CIPHER_CAMELLIA_256_CFB128);
		stack->setField<int>("CIPHER_CAMELLIA_128_CTR", MBEDTLS_CIPHER_CAMELLIA_128_CTR);
		stack->setField<int>("CIPHER_CAMELLIA_192_CTR", MBEDTLS_CIPHER_CAMELLIA_192_CTR);
		stack->setField<int>("CIPHER_CAMELLIA_256_CTR", MBEDTLS_CIPHER_CAMELLIA_256_CTR);
		stack->setField<int>("CIPHER_CAMELLIA_128_GCM", MBEDTLS_CIPHER_CAMELLIA_128_GCM);
		stack->setField<int>("CIPHER_CAMELLIA_192_GCM", MBEDTLS_CIPHER_CAMELLIA_192_GCM);
		stack->setField<int>("CIPHER_CAMELLIA_256_GCM", MBEDTLS_CIPHER_CAMELLIA_256_GCM);
		stack->setField<int>("CIPHER_DES_ECB", MBEDTLS_CIPHER_DES_ECB);
		stack->setField<int>("CIPHER_DES_CBC", MBEDTLS_CIPHER_DES_CBC);
		stack->setField<int>("CIPHER_DES_EDE_ECB", MBEDTLS_CIPHER_DES_EDE_ECB);
		stack->setField<int>("CIPHER_DES_EDE_CBC", MBEDTLS_CIPHER_DES_EDE_CBC);
		stack->setField<int>("CIPHER_DES_EDE3_ECB", MBEDTLS_CIPHER_DES_EDE3_ECB);
		stack->setField<int>("CIPHER_DES_EDE3_CBC", MBEDTLS_CIPHER_DES_EDE3_CBC);
		stack->setField<int>("CIPHER_BLOWFISH_ECB", MBEDTLS_CIPHER_BLOWFISH_ECB);
		stack->setField<int>("CIPHER_BLOWFISH_CBC", MBEDTLS_CIPHER_BLOWFISH_CBC);
		stack->setField<int>("CIPHER_BLOWFISH_CFB64", MBEDTLS_CIPHER_BLOWFISH_CFB64);
		stack->setField<int>("CIPHER_BLOWFISH_CTR", MBEDTLS_CIPHER_BLOWFISH_CTR);
		stack->setField<int>("CIPHER_ARC4_128", MBEDTLS_CIPHER_ARC4_128);
		stack->setField<int>("CIPHER_AES_128_CCM", MBEDTLS_CIPHER_AES_128_CCM);
		stack->setField<int>("CIPHER_AES_192_CCM", MBEDTLS_CIPHER_AES_192_CCM);
		stack->setField<int>("CIPHER_AES_256_CCM", MBEDTLS_CIPHER_AES_256_CCM);
		stack->setField<int>("CIPHER_CAMELLIA_128_CCM", MBEDTLS_CIPHER_CAMELLIA_128_CCM);
		stack->setField<int>("CIPHER_CAMELLIA_192_CCM", MBEDTLS_CIPHER_CAMELLIA_192_CCM);
		stack->setField<int>("CIPHER_CAMELLIA_256_CCM", MBEDTLS_CIPHER_CAMELLIA_256_CCM);

		stack->setField<int>("MODE_ECB", MBEDTLS_MODE_ECB);
		stack->setField<int>("MODE_CBC", MBEDTLS_MODE_CBC);
		stack->setField<int>("MODE_CFB", MBEDTLS_MODE_CFB);
		stack->setField<int>("MODE_OFB", MBEDTLS_MODE_OFB);
		stack->setField<int>("MODE_CTR", MBEDTLS_MODE_CTR);
		stack->setField<int>("MODE_GCM", MBEDTLS_MODE_GCM);
		stack->setField<int>("MODE_STREAM", MBEDTLS_MODE_STREAM);
		stack->setField<int>("MODE_CCM", MBEDTLS_MODE_CCM);

		stack->setField<int>("PADDING_PKCS7", MBEDTLS_PADDING_PKCS7);
		stack->setField<int>("PADDING_ONE_AND_ZEROS", MBEDTLS_PADDING_ONE_AND_ZEROS);
		stack->setField<int>("PADDING_ZEROS_AND_LEN", MBEDTLS_PADDING_ZEROS_AND_LEN);
		stack->setField<int>("PADDING_ZEROS", MBEDTLS_PADDING_ZEROS);
		stack->setField<int>("PADDING_NONE", MBEDTLS_PADDING_NONE);

		stack->setField<int>("DECRYPT", MBEDTLS_DECRYPT);
		stack->setField<int>("ENCRYPT", MBEDTLS_ENCRYPT);

		stack->setField<int>("KEY_LENGTH_DES", MBEDTLS_KEY_LENGTH_DES);
		stack->setField<int>("KEY_LENGTH_DES_EDE", MBEDTLS_KEY_LENGTH_DES_EDE);
		stack->setField<int>("KEY_LENGTH_DES_EDE3", MBEDTLS_KEY_LENGTH_DES_EDE3);

		stack->setField<int>("MAX_IV_LENGTH", MBEDTLS_MAX_IV_LENGTH);
		stack->setField<int>("MAX_BLOCK_LENGTH", MBEDTLS_MAX_BLOCK_LENGTH);

		stack->setField<int>("ERR_CIPHER_FEATURE_UNAVAILABLE", MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE);
		stack->setField<int>("ERR_CIPHER_BAD_INPUT_DATA", MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA);
		stack->setField<int>("ERR_CIPHER_ALLOC_FAILED", MBEDTLS_ERR_CIPHER_ALLOC_FAILED);
		stack->setField<int>("ERR_CIPHER_INVALID_PADDING", MBEDTLS_ERR_CIPHER_INVALID_PADDING);
		stack->setField<int>("ERR_CIPHER_FULL_BLOCK_EXPECTED", MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED);
		stack->setField<int>("ERR_CIPHER_AUTH_FAILED", MBEDTLS_ERR_CIPHER_AUTH_FAILED);

		stack->setField<int>("CIPHER_VARIABLE_IV_LEN", MBEDTLS_CIPHER_VARIABLE_IV_LEN);
		stack->setField<int>("CIPHER_VARIABLE_KEY_LEN", MBEDTLS_CIPHER_VARIABLE_KEY_LEN);

		//ECP
		stack->setField<int>("ERR_ECP_BAD_INPUT_DATA", MBEDTLS_ERR_ECP_BAD_INPUT_DATA);
		stack->setField<int>("ERR_ECP_BUFFER_TOO_SMALL", MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL);
		stack->setField<int>("ERR_ECP_FEATURE_UNAVAILABLE", MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE);
		stack->setField<int>("ERR_ECP_VERIFY_FAILED", MBEDTLS_ERR_ECP_VERIFY_FAILED);
		stack->setField<int>("ERR_ECP_ALLOC_FAILED", MBEDTLS_ERR_ECP_ALLOC_FAILED);
		stack->setField<int>("ERR_ECP_RANDOM_FAILED", MBEDTLS_ERR_ECP_RANDOM_FAILED);
		stack->setField<int>("ERR_ECP_INVALID_KEY", MBEDTLS_ERR_ECP_INVALID_KEY);
		stack->setField<int>("ERR_ECP_SIG_LEN_MISMATCH", MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH);

		stack->setField<int>("ECP_DP_SECP192R1", MBEDTLS_ECP_DP_SECP192R1);
		stack->setField<int>("ECP_DP_SECP224R1", MBEDTLS_ECP_DP_SECP224R1);
		stack->setField<int>("ECP_DP_SECP256R1", MBEDTLS_ECP_DP_SECP256R1);
		stack->setField<int>("ECP_DP_SECP384R1", MBEDTLS_ECP_DP_SECP384R1);
		stack->setField<int>("ECP_DP_SECP521R1", MBEDTLS_ECP_DP_SECP521R1);
		stack->setField<int>("ECP_DP_BP256R1", MBEDTLS_ECP_DP_BP256R1);
		stack->setField<int>("ECP_DP_BP384R1", MBEDTLS_ECP_DP_BP384R1);
		stack->setField<int>("ECP_DP_BP512R1", MBEDTLS_ECP_DP_BP512R1);
		stack->setField<int>("ECP_DP_CURVE25519", MBEDTLS_ECP_DP_CURVE25519);
		stack->setField<int>("ECP_DP_SECP192K1", MBEDTLS_ECP_DP_SECP192K1);
		stack->setField<int>("ECP_DP_SECP224K1", MBEDTLS_ECP_DP_SECP224K1);
		stack->setField<int>("ECP_DP_SECP256K1", MBEDTLS_ECP_DP_SECP256K1);

		stack->setField<int>("ECP_DP_MAX", MBEDTLS_ECP_DP_MAX);
		stack->setField<int>("ECP_MAX_BITS", MBEDTLS_ECP_MAX_BITS);
		stack->setField<int>("ECP_MAX_BYTES", MBEDTLS_ECP_MAX_BYTES);
		stack->setField<int>("ECP_MAX_PT_LEN", MBEDTLS_ECP_MAX_PT_LEN);
		stack->setField<int>("ECP_WINDOW_SIZE", MBEDTLS_ECP_WINDOW_SIZE);
		stack->setField<int>("ECP_FIXED_POINT_OPTIM", MBEDTLS_ECP_FIXED_POINT_OPTIM);
		stack->setField<int>("ECP_PF_UNCOMPRESSED", MBEDTLS_ECP_PF_UNCOMPRESSED);
		stack->setField<int>("ECP_PF_COMPRESSED", MBEDTLS_ECP_PF_COMPRESSED);

		stack->setField<int>("ECDSA_MAX_LEN", MBEDTLS_ECDSA_MAX_LEN);
		stack->setField<int>("ECDH_OURS", MBEDTLS_ECDH_OURS);
		stack->setField<int>("ECDH_THEIRS", MBEDTLS_ECDH_THEIRS);
	}
}

